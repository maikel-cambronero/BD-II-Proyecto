/* FUNCION QUE RETORNA EL VALOR TOTAL DE LA BONIFICACIÓN*/
CREATE OR REPLACE FUNCTION G4_PROYECTO_USUARIO_4.FN_MAXIMO_BONIFICACIONES (PID_BONI IN NUMBER)
RETURN NUMBER
IS 
 v_VALOR_BONI NUMBER;
BEGIN 
    SELECT SUM (BONI_RETRIBUCION_MONTO_NETO) INTO v_VALOR_BONI
        FROM G4_PROYECTO_USUARIO_3.bonificacion 
            WHERE  BONI_ID = PID_BONI;
            
RETURN v_valor_boni;
END; 

/*SP CAMBIAR EL VALOR DEL NETO DE LA BONIFICACIÓN EN CASO DE SER MAYOR A 25,000*/
CREATE OR REPLACE PROCEDURE G4_PROYECTO_USUARIO_4.SP_BONI_MAYOR (PID_BONIFICACION IN NUMBER)
IS 
BEGIN 

    IF g4_proyecto_usuario_4.FN_MAXIMO_BONIFICACIONES (PID_BONIFICACION) >= 25000 THEN
        UPDATE G4_PROYECTO_USUARIO_3.BONIFICACION
            SET BONIFICACION.BONI_RETRIBUCION_MONTO_NETO = 25000
                WHERE BONIFICACION.BONI_ID = PID_BONIFICACION;
        COMMIT;
    END IF;
    
END;

/*FUNCIÓN QUE RETORNA EL VALOR TOTAL DE LAS REDUCCIONES*/
CREATE OR REPLACE FUNCTION G4_PROYECTO_USUARIO_3.FN_MAXIMO_REDUCCION (PID_REDU IN NUMBER)
RETURN NUMBER
IS
v_VALOR_RUDU NUMBER;
BEGIN
    SELECT SUM (BONI_RETRIBUCION_MONTO_NETO) INTO v_VALOR_BONI
        FROM G4_PROYECTO_USUARIO_3.bonificacion 
            WHERE  BONI_ID = PID_BONI;  
    RETURN v_valor_rudu;
END;

/*SP CAMBIA LA CANTIDAD NETA DE LA REDUCCION EN CASO DE SER MAYOR O IGUAL A 10,000*/
CREATE OR REPLACE PROCEDURE G4_PROYECTO_USUARIO_4.SP_REDU_MAYOR(PID_REDUCCION IN NUMBER)
IS 
BEGIN 
     IF G4_PROYECTO_USUARIO_4.FN_MAXIMO_BONIFICACIONES (PID_REDUCCION) >= 10000 THEN 
        UPDATE G4_PROYECTO_USUARIO_3.REDUCCION
            SET REDUCCION.REDREDU_RETRIBUCION_MUONTO_NETO = 10000
                WHERE REDUCCION.REDU_ID = PID_REDUCCION;
        COMMIT;
    END IF;
END;
        
/*FUCIÓN QUE INDICA SI EL EMPLEADO TIENE ALGUNA BONIFICACIÓN*/
CREATE OR REPLACE FUNCTION G4_PROYECTO_USUARIO_4.SP_EMPLEADO_BONIFICACION (PID_EMPLEADO IN NUMBER)
RETURN NUMBER 
IS
v_EXISTE_BONI NUMBER;
v_ID_CARGO NUMBER;
BEGIN 
 SELECT sala_boni_id INTO v_EXISTE_BONI
    FROM G4_PROYECTO_USUARIO_1.SALARIO
     WHERE SALA_EMPLEADO_ID = PID_EMPLEADO;
     
     IF v_EXISTE_BONI = NULL THEN 
     
        SELECT EMPLEADO.EMPL_CARGO_ID INTO v_ID_CARGO
            FROM G4_PROYECTO_USUARIO_2.EMPLEADO
                WHERE EMPLEADO.EMPL_ID = PID_EMPLEADO;
    RETURN v_ID_CARGO;
       END IF; 
       
       IF v_EXISTE_BONI != NULL THEN
            DBMS_OUTPUT.PUT_LINE(' El empleado cuenta con bonificaciones. ');
            RETURN 0;
        END IF;
END;

/*FUNCIÓN QUE OBTIENE EL SALARIO MINIMO DEL EMPLEADO*/
CREATE OR REPLACE FUNCTION G4_PROYECTO_USUARIO_4.FN_OBTIENE_SALARIO (PID_CARGO IN NUMBER)
RETURN NUMBER 
IS 
v_SALARIO_MINIMO NUMBER;
BEGIN 
    SELECT CARG_SALARIO_MINIMO INTO v_SALARIO_MINIMO
        FROM G4_PROYECTO_USUARIO_2.CARGO
            WHERE CARGO.CAR_ID = PID_CARGO;
    RETURN v_SALARIO_MINIMO;
END;

/*PROCEDIMIENTO QUE ACTUALIZA LA TABLA SALARIO EL CAMPO DE SALARIO NETO.*/
CREATE OR REPLACE PROCEDURE G4_PROYECTO_USUARIO_4.SP_ACTUALIZAR_SALARIO_NETO (PID_CARGO IN NUMBER,
                                                                                                                                                                                        PID_EMPLEADO IN NUMBER,
                                                                                                                                                                                        PFECA IN DATE)
IS
CURSOR v_
BEGIN 
    UPDATE G4_PROYECTO_USUARIO_1.SALARIO
        SET SALARIO.SALA_NETO = G4_PROYECTO_USUARIO_4.FN_OBTIENE_SALARIO (PID_CARGO)
            WHERE SALARIO.SALA_EMPLEADO_ID = PID_EMPLEADO AND 
            SALARIO.SALA_FECHA = PFECHA;
END; 



        
        
        
        
      
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
